Graph matching using BMRM:

-----------------------------------------------------------------------
Quickstart:
-----------------------------------------------------------------------

cd sourcefiles
sh build.sh

./linear-bmrm-train graphmatch.config
./linear-bmrm-predict graphmatch.config

-----------------------------------------------------------------------

The script 'build.sh' (in  the  folder  'sourcefiles')  will  copy  the
relevant files and compile the program.

The configuration file graphmatch.config contains all of the parameters
you will likely want to change. The  relevant  parameters  are  at  the
bottom of the file.

To learn, type

./linear-bmrm-train graphmatch.config

To predict, type

./linear-bmrm-predict graphmatch.config


-----------------------------------------------------------------------
Configuration file:
-----------------------------------------------------------------------

The parameters you are most likely to change in the configuration  file
are:

int quadratic
(1 if we want to use quadratic assignment, 0 otherwise).

int maxdata
(what is the maximum number of training/test examples we  will  allow).
Set to -1 to allow any amount of data.

string Data.trainFile
string Data.testFile
(paths to training/test node features).


-----------------------------------------------------------------------
About:
-----------------------------------------------------------------------

This code uses the BMRM  solver  written  by  Choon  Hui  Teo  and  SVN
Vishwanathan. Only the files graphdata.*pp and graphmatchloss.*pp  have
been created to solve this specific problem.

The file graphdata.cpp simply reads training/test data from a file, and
stores it internally. The file graphmatchloss.cpp computes the loss and
gradient as required by the solver.


-----------------------------------------------------------------------
File Format:
-----------------------------------------------------------------------

The training and testing files should consist of pairs of lines like:


template_scene template_features template_image template_adj
target_scene   target_features   target_image   target_adj


Where each name is a path to a file:
template_scene    -- should contain the points in  the  template  scene
                     (an X and a Y coordinate).
template_features -- should contain the feature  vectors  for  each  of
                     these points.
template_image    -- the image containing these points (just  set  this
                     to "NULL" if there is no image). This is only used
                     to save an image containing the learned match,  or
                     adjacency matrix.
template_adj      -- the adjacency matrix for the template  scene  (set
                     this to "NULL" if there is no adjacency data).

target_*          -- the same data, for the *target*  scene.  The  only
                     important thing to note is that it is assumed that
                     the  correct  match  always  corresponds   to   an
                     identity matrix (hence you should order your  data
                     accordingly).

-----------------------------------------------------------------------
Contact:
-----------------------------------------------------------------------

My e-mail is:

julian.mcauley@nicta.com.au

If you want to write your own code using the  BMRM  solver  used  here,
contact Choon Hui Teo:

choonhui.teo@anu.edu.au

